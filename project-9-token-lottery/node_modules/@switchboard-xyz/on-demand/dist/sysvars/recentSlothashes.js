import { SLOT_HASHES_SYSVAR_ID } from "../constants.js";
import * as anchor from "@coral-xyz/anchor";
import bs58 from "bs58";
export class RecentSlotHashes {
    constructor() { }
    static async fetchLatest(connection) {
        const accountInfo = await connection.getAccountInfo(SLOT_HASHES_SYSVAR_ID, {
            commitment: "confirmed",
            dataSlice: { length: 40, offset: 8 },
        });
        if (!accountInfo) {
            throw new Error("Failed to get account info");
        }
        const buffer = accountInfo.data;
        const slotNumber = buffer.readBigUInt64LE(0);
        const encoded = bs58.encode(Uint8Array.prototype.slice.call(buffer, 8));
        return [new anchor.BN(slotNumber.toString()), encoded];
    }
    static async fetchLatestNSlothashes(connection, n) {
        const accountInfo = await connection.getAccountInfo(SLOT_HASHES_SYSVAR_ID, {
            commitment: "confirmed",
            dataSlice: { length: 40 * Math.floor(n), offset: 8 },
        });
        if (!accountInfo) {
            throw new Error("Failed to get account info");
        }
        const out = [];
        const buffer = accountInfo.data;
        for (let i = 0; i < n; i++) {
            const slotNumber = buffer.readBigUInt64LE(i * 40);
            const hashStart = i * 40 + 8;
            const hashEnd = hashStart + 32;
            const encoded = bs58.encode(Uint8Array.prototype.slice.call(buffer, hashStart, hashEnd));
            out.push([new anchor.BN(slotNumber.toString()), encoded]);
        }
        return out;
    }
}
//# sourceMappingURL=recentSlothashes.js.map