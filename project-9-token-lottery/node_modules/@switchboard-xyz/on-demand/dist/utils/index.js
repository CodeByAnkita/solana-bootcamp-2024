export * from "./TypescriptUtils.js";
import { Queue } from "../accounts/queue.js";
import * as anchor from "@coral-xyz/anchor";
import { PublicKey } from "@solana/web3.js";
import { CrossbarClient } from "@switchboard-xyz/common";
export async function loadLookupTables(accounts) {
    const out = [];
    for (const account of accounts) {
        if (account.loadLookupTable) {
            out.push(account.loadLookupTable());
        }
    }
    return Promise.all(out);
}
export const ON_DEMAND_MAINNET_PID = "SBondMDrcV3K4kxZR1HNVT7osZxAHVHgYXL5Ze1oMUv";
export const ON_DEMAND_MAINNET_GUARDIAN_QUEUE = "B7WgdyAgzK7yGoxfsBaNnY6d41bTybTzEh4ZuQosnvLK";
export const ON_DEMAND_MAINNET_QUEUE = "A43DyUGA7s8eXPxqEjJY6EBu1KKbNgfxF8h17VAHn13w";
export const ON_DEMAND_DEVNET_PID = "SBondMDrcV3K4kxZR1HNVT7osZxAHVHgYXL5Ze1oMUv";
export const ON_DEMAND_DEVNET_GUARDIAN_QUEUE = "Did69tHXs3NTTomR4ZBzttKjB6W3dssavL8uafVbJ1Q";
export const ON_DEMAND_DEVNET_QUEUE = "FfD96yeXs4cxZshoPPSKhSPgVQxLAJUT3gefgh84m1Di";
export async function getDefaultDevnetQueue(solanaRPCUrl = "https://api.devnet.solana.com") {
    return getQueue(solanaRPCUrl, ON_DEMAND_DEVNET_PID.toString(), ON_DEMAND_DEVNET_QUEUE.toString());
}
export async function getDefaultDevnetGuardianQueue(solanaRPCUrl = "https://api.devnet.solana.com") {
    return getQueue(solanaRPCUrl, ON_DEMAND_DEVNET_PID.toString(), ON_DEMAND_DEVNET_GUARDIAN_QUEUE.toString());
}
export async function getDefaultQueue(solanaRPCUrl = "https://api.mainnet-beta.solana.com") {
    return getQueue(solanaRPCUrl, ON_DEMAND_MAINNET_PID.toString(), ON_DEMAND_MAINNET_QUEUE.toString());
}
export async function getDefaultGuardianQueue(solanaRPCUrl = "https://api.mainnet-beta.solana.com") {
    return getQueue(solanaRPCUrl, ON_DEMAND_MAINNET_PID.toString(), ON_DEMAND_MAINNET_GUARDIAN_QUEUE.toString());
}
export async function getQueue(solanaRPCUrl, switchboardProgramId, queueAddress) {
    const { PublicKey, Keypair, Connection } = anchor.web3;
    const wallet = new anchor.Wallet(new Keypair());
    const connection = new Connection(solanaRPCUrl, "confirmed");
    const PID = new PublicKey(switchboardProgramId);
    const queue = new PublicKey(queueAddress);
    const provider = new anchor.AnchorProvider(connection, wallet, {});
    const idl = (await anchor.Program.fetchIdl(PID, provider));
    const program = new anchor.Program(idl, provider);
    const queueAccount = new Queue(program, queue);
    return queueAccount;
}
export async function storeFeed(queue, jobs, crossbarUrl = "https://crossbar.switchboard.xyz") {
    const crossbar = crossbarUrl.endsWith("/")
        ? crossbarUrl.slice(0, -1)
        : crossbarUrl;
    const x = new CrossbarClient(crossbar);
    return await x.store(queue, jobs);
}
export async function getAssociatedTokenAddress(mint, owner, allowOwnerOffCurve = false, programId = TOKEN_PROGRAM_ID, associatedTokenProgramId = ASSOCIATED_TOKEN_PROGRAM_ID) {
    if (!allowOwnerOffCurve && !PublicKey.isOnCurve(owner.toBuffer()))
        throw new Error("TokenOwnerOffCurveError");
    const [address] = await PublicKey.findProgramAddress([owner.toBuffer(), programId.toBuffer(), mint.toBuffer()], associatedTokenProgramId);
    return address;
}
export function getAssociatedTokenAddressSync(mint, owner, allowOwnerOffCurve = false, programId = TOKEN_PROGRAM_ID, associatedTokenProgramId = ASSOCIATED_TOKEN_PROGRAM_ID) {
    if (!allowOwnerOffCurve && !PublicKey.isOnCurve(owner.toBuffer()))
        throw new Error("TokenOwnerOffCurveError");
    const [address] = PublicKey.findProgramAddressSync([owner.toBuffer(), programId.toBuffer(), mint.toBuffer()], associatedTokenProgramId);
    return address;
}
export const TOKEN_PROGRAM_ID = new PublicKey("TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA");
export const TOKEN_2022_PROGRAM_ID = new PublicKey("TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb");
export const ASSOCIATED_TOKEN_PROGRAM_ID = new PublicKey("ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL");
export const NATIVE_MINT = new PublicKey("So11111111111111111111111111111111111111112");
export const NATIVE_MINT_2022 = new PublicKey("9pan9bMn5HatX4EJdBwg9VgCa7Uz5HL8N1m5D3NdXejP");
//# sourceMappingURL=index.js.map