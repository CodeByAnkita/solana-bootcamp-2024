"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.NATIVE_MINT_2022 = exports.NATIVE_MINT = exports.ASSOCIATED_TOKEN_PROGRAM_ID = exports.TOKEN_2022_PROGRAM_ID = exports.TOKEN_PROGRAM_ID = exports.getAssociatedTokenAddressSync = exports.getAssociatedTokenAddress = exports.storeFeed = exports.getQueue = exports.getDefaultGuardianQueue = exports.getDefaultQueue = exports.getDefaultDevnetGuardianQueue = exports.getDefaultDevnetQueue = exports.ON_DEMAND_DEVNET_QUEUE = exports.ON_DEMAND_DEVNET_GUARDIAN_QUEUE = exports.ON_DEMAND_DEVNET_PID = exports.ON_DEMAND_MAINNET_QUEUE = exports.ON_DEMAND_MAINNET_GUARDIAN_QUEUE = exports.ON_DEMAND_MAINNET_PID = exports.loadLookupTables = void 0;
__exportStar(require("./TypescriptUtils.cjs"), exports);
const queue_js_1 = require("../accounts/queue.cjs");
const anchor = __importStar(require("@coral-xyz/anchor"));
const web3_js_1 = require("@solana/web3.js");
const common_1 = require("@switchboard-xyz/common");
async function loadLookupTables(accounts) {
    const out = [];
    for (const account of accounts) {
        if (account.loadLookupTable) {
            out.push(account.loadLookupTable());
        }
    }
    return Promise.all(out);
}
exports.loadLookupTables = loadLookupTables;
exports.ON_DEMAND_MAINNET_PID = "SBondMDrcV3K4kxZR1HNVT7osZxAHVHgYXL5Ze1oMUv";
exports.ON_DEMAND_MAINNET_GUARDIAN_QUEUE = "B7WgdyAgzK7yGoxfsBaNnY6d41bTybTzEh4ZuQosnvLK";
exports.ON_DEMAND_MAINNET_QUEUE = "A43DyUGA7s8eXPxqEjJY6EBu1KKbNgfxF8h17VAHn13w";
exports.ON_DEMAND_DEVNET_PID = "SBondMDrcV3K4kxZR1HNVT7osZxAHVHgYXL5Ze1oMUv";
exports.ON_DEMAND_DEVNET_GUARDIAN_QUEUE = "Did69tHXs3NTTomR4ZBzttKjB6W3dssavL8uafVbJ1Q";
exports.ON_DEMAND_DEVNET_QUEUE = "FfD96yeXs4cxZshoPPSKhSPgVQxLAJUT3gefgh84m1Di";
async function getDefaultDevnetQueue(solanaRPCUrl = "https://api.devnet.solana.com") {
    return getQueue(solanaRPCUrl, exports.ON_DEMAND_DEVNET_PID.toString(), exports.ON_DEMAND_DEVNET_QUEUE.toString());
}
exports.getDefaultDevnetQueue = getDefaultDevnetQueue;
async function getDefaultDevnetGuardianQueue(solanaRPCUrl = "https://api.devnet.solana.com") {
    return getQueue(solanaRPCUrl, exports.ON_DEMAND_DEVNET_PID.toString(), exports.ON_DEMAND_DEVNET_GUARDIAN_QUEUE.toString());
}
exports.getDefaultDevnetGuardianQueue = getDefaultDevnetGuardianQueue;
async function getDefaultQueue(solanaRPCUrl = "https://api.mainnet-beta.solana.com") {
    return getQueue(solanaRPCUrl, exports.ON_DEMAND_MAINNET_PID.toString(), exports.ON_DEMAND_MAINNET_QUEUE.toString());
}
exports.getDefaultQueue = getDefaultQueue;
async function getDefaultGuardianQueue(solanaRPCUrl = "https://api.mainnet-beta.solana.com") {
    return getQueue(solanaRPCUrl, exports.ON_DEMAND_MAINNET_PID.toString(), exports.ON_DEMAND_MAINNET_GUARDIAN_QUEUE.toString());
}
exports.getDefaultGuardianQueue = getDefaultGuardianQueue;
async function getQueue(solanaRPCUrl, switchboardProgramId, queueAddress) {
    const { PublicKey, Keypair, Connection } = anchor.web3;
    const wallet = new anchor.Wallet(new Keypair());
    const connection = new Connection(solanaRPCUrl, "confirmed");
    const PID = new PublicKey(switchboardProgramId);
    const queue = new PublicKey(queueAddress);
    const provider = new anchor.AnchorProvider(connection, wallet, {});
    const idl = (await anchor.Program.fetchIdl(PID, provider));
    const program = new anchor.Program(idl, provider);
    const queueAccount = new queue_js_1.Queue(program, queue);
    return queueAccount;
}
exports.getQueue = getQueue;
async function storeFeed(queue, jobs, crossbarUrl = "https://crossbar.switchboard.xyz") {
    const crossbar = crossbarUrl.endsWith("/")
        ? crossbarUrl.slice(0, -1)
        : crossbarUrl;
    const x = new common_1.CrossbarClient(crossbar);
    return await x.store(queue, jobs);
}
exports.storeFeed = storeFeed;
async function getAssociatedTokenAddress(mint, owner, allowOwnerOffCurve = false, programId = exports.TOKEN_PROGRAM_ID, associatedTokenProgramId = exports.ASSOCIATED_TOKEN_PROGRAM_ID) {
    if (!allowOwnerOffCurve && !web3_js_1.PublicKey.isOnCurve(owner.toBuffer()))
        throw new Error("TokenOwnerOffCurveError");
    const [address] = await web3_js_1.PublicKey.findProgramAddress([owner.toBuffer(), programId.toBuffer(), mint.toBuffer()], associatedTokenProgramId);
    return address;
}
exports.getAssociatedTokenAddress = getAssociatedTokenAddress;
function getAssociatedTokenAddressSync(mint, owner, allowOwnerOffCurve = false, programId = exports.TOKEN_PROGRAM_ID, associatedTokenProgramId = exports.ASSOCIATED_TOKEN_PROGRAM_ID) {
    if (!allowOwnerOffCurve && !web3_js_1.PublicKey.isOnCurve(owner.toBuffer()))
        throw new Error("TokenOwnerOffCurveError");
    const [address] = web3_js_1.PublicKey.findProgramAddressSync([owner.toBuffer(), programId.toBuffer(), mint.toBuffer()], associatedTokenProgramId);
    return address;
}
exports.getAssociatedTokenAddressSync = getAssociatedTokenAddressSync;
exports.TOKEN_PROGRAM_ID = new web3_js_1.PublicKey("TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA");
exports.TOKEN_2022_PROGRAM_ID = new web3_js_1.PublicKey("TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb");
exports.ASSOCIATED_TOKEN_PROGRAM_ID = new web3_js_1.PublicKey("ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL");
exports.NATIVE_MINT = new web3_js_1.PublicKey("So11111111111111111111111111111111111111112");
exports.NATIVE_MINT_2022 = new web3_js_1.PublicKey("9pan9bMn5HatX4EJdBwg9VgCa7Uz5HL8N1m5D3NdXejP");
//# sourceMappingURL=index.js.map