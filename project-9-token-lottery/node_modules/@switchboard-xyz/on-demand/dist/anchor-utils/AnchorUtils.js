import { SB_ON_DEMAND_PID } from "./../constants.js";
import * as anchor from "@coral-xyz/anchor";
import { Connection, Keypair } from "@solana/web3.js";
import * as fs from "fs";
import yaml from "js-yaml";
import os from "os";
import path from "path";
export class AnchorUtils {
    static async initWalletFromFile(filePath) {
        const keypair = await AnchorUtils.initKeypairFromFile(filePath);
        const wallet = new anchor.Wallet(keypair);
        return [wallet, keypair];
    }
    static async initKeypairFromFile(filePath) {
        const secretKeyString = fs.readFileSync(filePath, { encoding: "utf8" });
        const secretKey = Uint8Array.from(JSON.parse(secretKeyString));
        const keypair = Keypair.fromSecretKey(secretKey);
        return keypair;
    }
    static async loadProgramFromEnv() {
        const config = await AnchorUtils.loadEnv();
        const idl = (await anchor.Program.fetchIdl(SB_ON_DEMAND_PID, config.provider));
        const program = new anchor.Program(idl, config.provider);
        return new anchor.Program(idl, config.provider);
    }
    static async loadEnv() {
        const configPath = path.join(os.homedir(), ".config", "solana", "cli", "config.yml");
        const fileContents = fs.readFileSync(configPath, "utf8");
        const data = yaml.load(fileContents);
        const defaultCon = new Connection("https://api.devnet.solana.com");
        const defaultKeypair = Keypair.generate();
        const config = {
            rpcUrl: data.json_rpc_url,
            webSocketUrl: data.websocket_url,
            keypairPath: data.keypair_path,
            commitment: data.commitment,
            keypair: data.keypair_path,
            connection: defaultCon,
            provider: new anchor.AnchorProvider(defaultCon, new anchor.Wallet(defaultKeypair), {}),
            wallet: new anchor.Wallet(defaultKeypair),
            program: null,
        };
        config.keypair = (await AnchorUtils.initWalletFromFile(config.keypairPath))[1];
        config.connection = new Connection(config.rpcUrl, {
            commitment: "confirmed",
        });
        config.wallet = new anchor.Wallet(config.keypair);
        config.provider = new anchor.AnchorProvider(config.connection, config.wallet, {
            preflightCommitment: "confirmed",
            commitment: "confirmed",
        });
        const idl = (await anchor.Program.fetchIdl(SB_ON_DEMAND_PID, config.provider));
        const program = new anchor.Program(idl, config.provider);
        config.program = program;
        return config;
    }
    static loggedEvents(program, logs) {
        const coder = new anchor.BorshEventCoder(program.idl);
        const out = [];
        logs.forEach((log) => {
            if (log.startsWith("Program data: ")) {
                const strings = log.split(" ");
                if (strings.length !== 3)
                    return;
                try {
                    out.push(coder.decode(strings[2]));
                }
                catch { }
            }
        });
        return out;
    }
}
//# sourceMappingURL=AnchorUtils.js.map