/// <reference types="node" resolution-mode="require"/>
import type { FeedEvalResponse, FetchSignaturesMultiResponse } from "../oracle-interfaces/gateway.js";
import { Gateway } from "../oracle-interfaces/gateway.js";
import type { SwitchboardPermission } from "./permission.js";
import type { FeedRequest } from "./pullFeed.js";
import { type Program } from "@coral-xyz/anchor";
import type { AddressLookupTableAccount, TransactionInstruction } from "@solana/web3.js";
import { Keypair, PublicKey } from "@solana/web3.js";
import { type OracleJob } from "@switchboard-xyz/common";
export declare class Queue {
    readonly program: Program;
    readonly pubkey: PublicKey;
    static createIx(program: Program, params: {
        allowAuthorityOverrideAfter?: number;
        requireAuthorityHeartbeatPermission?: boolean;
        requireUsagePermission?: boolean;
        maxQuoteVerificationAge?: number;
        reward?: number;
        nodeTimeout?: number;
        lutSlot?: number;
    }): Promise<[Queue, Keypair, TransactionInstruction]>;
    initDelegationGroupIx(params: {
        lutSlot?: number;
        overrideStakePool?: PublicKey;
    }): Promise<TransactionInstruction>;
    static fetchSignatures(program: Program, params: {
        gateway?: string;
        queue: PublicKey;
        recentHash?: string;
        jobs: OracleJob[];
        numSignatures?: number;
        maxVariance?: number;
        minResponses?: number;
    }): Promise<FeedEvalResponse[]>;
    static fetchSignaturesMulti(program: Program, params: {
        gateway?: string;
        queue: PublicKey;
        recentHash?: string;
        feedConfigs: FeedRequest[];
        minResponses?: number;
    }): Promise<FetchSignaturesMultiResponse>;
    static fetchFeedHash(program: Program, params: {
        gateway?: string;
        queue: PublicKey;
        recentHash?: string;
        jobs: OracleJob[];
        numSignatures?: number;
        maxVariance?: number;
        minResponses?: number;
    }): Promise<Buffer>;
    constructor(program: Program, pubkey: PublicKey);
    fetchOracleKeys(): Promise<PublicKey[]>;
    fetchAllGateways(): Promise<Gateway[]>;
    fetchGateway(): Promise<Gateway>;
    fetchSignatures(params: {
        gateway?: string;
        recentHash?: string;
        jobs: OracleJob[];
        numSignatures?: number;
        maxVariance?: number;
        minResponses?: number;
    }): Promise<FeedEvalResponse[]>;
    fetchSignaturesMulti(params: {
        gateway?: string;
        queue: PublicKey;
        recentHash?: string;
        feedConfigs: FeedRequest[];
        minResponses?: number;
    }): Promise<FetchSignaturesMultiResponse>;
    loadData(): Promise<any>;
    addMrEnclaveIx(params: {
        mrEnclave: Uint8Array;
    }): Promise<TransactionInstruction>;
    rmMrEnclaveIx(params: {
        mrEnclave: Uint8Array;
    }): Promise<TransactionInstruction>;
    setConfigsIx(params: {
        authority?: PublicKey;
        reward?: number;
        nodeTimeout?: number;
    }): Promise<TransactionInstruction>;
    setOraclePermissionIx(params: {
        oracle: PublicKey;
        permission: SwitchboardPermission;
        enable: boolean;
    }): Promise<TransactionInstruction>;
    rmAllMrEnclaveIxs(): Promise<Array<TransactionInstruction>>;
    fetchFreshOracle(): Promise<PublicKey>;
    lutSigner(): Promise<PublicKey>;
    lutKey(lutSlot: number): Promise<PublicKey>;
    loadLookupTable(): Promise<AddressLookupTableAccount>;
}
//# sourceMappingURL=queue.d.ts.map