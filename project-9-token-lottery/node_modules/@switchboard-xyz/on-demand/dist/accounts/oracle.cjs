"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Oracle = void 0;
const spl = __importStar(require("./../utils/index.cjs"));
const state_js_1 = require("./state.cjs");
const anchor_1 = require("@coral-xyz/anchor");
const web3_js_1 = require("@solana/web3.js");
class Oracle {
    program;
    pubkey;
    constructor(program, pubkey) {
        this.program = program;
        this.pubkey = pubkey;
    }
    static async create(program, params) {
        const stateKey = state_js_1.State.keyFromSeed(program);
        const state = await state_js_1.State.loadData(program);
        const payer = program.provider.wallet.payer;
        const oracle = web3_js_1.Keypair.generate();
        const oracleStats = (await web3_js_1.PublicKey.findProgramAddress([Buffer.from("OracleStats"), oracle.publicKey.toBuffer()], program.programId))[0];
        const lutSigner = (await web3_js_1.PublicKey.findProgramAddress([Buffer.from("LutSigner"), oracle.publicKey.toBuffer()], program.programId))[0];
        const [delegationPool] = await web3_js_1.PublicKey.findProgramAddress([
            Buffer.from("Delegation"),
            stateKey.toBuffer(),
            oracleStats.toBuffer(),
            state.stakePool.toBuffer(),
        ], state.stakeProgram);
        const recentSlot = await program.provider.connection.getSlot("finalized");
        const [_, lut] = web3_js_1.AddressLookupTableProgram.createLookupTable({
            authority: lutSigner,
            payer: payer.publicKey,
            recentSlot,
        });
        const ix = await program.instruction.oracleInit({
            recentSlot: new anchor_1.BN(recentSlot.toString()),
            authority: payer.publicKey,
            queue: params.queue,
            secpAuthority: null,
        }, {
            accounts: {
                oracle: oracle.publicKey,
                oracleStats,
                authority: payer.publicKey,
                programState: stateKey,
                payer: payer.publicKey,
                systemProgram: web3_js_1.SystemProgram.programId,
                tokenProgram: spl.TOKEN_PROGRAM_ID,
                tokenMint: spl.NATIVE_MINT,
                delegationPool,
                lutSigner,
                lut,
                addressLookupTableProgram: web3_js_1.AddressLookupTableProgram.programId,
                switchMint: state.switchMint,
                wsolVault: spl.getAssociatedTokenAddressSync(spl.NATIVE_MINT, oracle.publicKey),
                switchVault: spl.getAssociatedTokenAddressSync(state.switchMint, oracle.publicKey),
                stakeProgram: state.stakeProgram,
                stakePool: state.stakePool,
            },
        });
        const ix2 = await program.instruction.oracleUpdateDelegation({
            recentSlot: new anchor_1.BN(recentSlot.toString()),
        }, {
            accounts: {
                oracle: oracle.publicKey,
                oracleStats,
                queue: params.queue,
                authority: stateKey,
                programState: stateKey,
                payer: payer.publicKey,
                systemProgram: web3_js_1.SystemProgram.programId,
                tokenProgram: spl.TOKEN_PROGRAM_ID,
                delegationPool,
                lutSigner,
                lut,
                addressLookupTableProgram: web3_js_1.AddressLookupTableProgram.programId,
                switchMint: state.switchMint,
                nativeMint: spl.NATIVE_MINT,
                wsolVault: web3_js_1.PublicKey.findProgramAddressSync([
                    Buffer.from("RewardPool"),
                    delegationPool.toBuffer(),
                    spl.NATIVE_MINT.toBuffer(),
                ], state.stakeProgram)[0],
                switchVault: web3_js_1.PublicKey.findProgramAddressSync([
                    Buffer.from("RewardPool"),
                    delegationPool.toBuffer(),
                    state.switchMint.toBuffer(),
                ], state.stakeProgram)[0],
                stakeProgram: state.stakeProgram,
                stakePool: state.stakePool,
            },
        });
        return [new Oracle(program, oracle.publicKey), [ix, ix2], oracle];
    }
    async updateDelegationRewardPoolsIx(params) {
        const program = this.program;
        const stateKey = state_js_1.State.keyFromSeed(program);
        const state = await state_js_1.State.loadData(program);
        const switchMint = params.overrideMint ?? state.switchMint;
        const stakePool = params.overrideStakePool ?? state.stakePool;
        const stakeProgram = state.stakeProgram;
        const payer = program.provider.wallet.payer;
        const oracleData = await this.loadData();
        const oracleStats = (await web3_js_1.PublicKey.findProgramAddress([Buffer.from("OracleStats"), this.pubkey.toBuffer()], program.programId))[0];
        const lutSigner = (await web3_js_1.PublicKey.findProgramAddress([Buffer.from("LutSigner"), this.pubkey.toBuffer()], program.programId))[0];
        const [delegationPool] = await web3_js_1.PublicKey.findProgramAddress([
            Buffer.from("Delegation"),
            stateKey.toBuffer(),
            oracleStats.toBuffer(),
            stakePool.toBuffer(),
        ], stakeProgram);
        const lutSlot = oracleData.lutSlot.toNumber();
        const [_, lut] = web3_js_1.AddressLookupTableProgram.createLookupTable({
            authority: lutSigner,
            payer: payer.publicKey,
            recentSlot: lutSlot,
        });
        const ix = await program.instruction.oracleUpdateDelegation({
            recentSlot: new anchor_1.BN(lutSlot.toString()),
        }, {
            accounts: {
                oracle: this.pubkey,
                oracleStats,
                queue: oracleData.queue,
                authority: stateKey,
                programState: stateKey,
                payer: payer.publicKey,
                systemProgram: web3_js_1.SystemProgram.programId,
                tokenProgram: spl.TOKEN_PROGRAM_ID,
                delegationPool,
                lutSigner,
                lut,
                addressLookupTableProgram: web3_js_1.AddressLookupTableProgram.programId,
                switchMint: switchMint,
                nativeMint: spl.NATIVE_MINT,
                wsolVault: web3_js_1.PublicKey.findProgramAddressSync([
                    Buffer.from("RewardPool"),
                    delegationPool.toBuffer(),
                    spl.NATIVE_MINT.toBuffer(),
                ], stakeProgram)[0],
                switchVault: web3_js_1.PublicKey.findProgramAddressSync([
                    Buffer.from("RewardPool"),
                    delegationPool.toBuffer(),
                    switchMint.toBuffer(),
                ], stakeProgram)[0],
                stakeProgram: stakeProgram,
                stakePool: stakePool,
            },
        });
        return ix;
    }
    async setConfigsIx(params) {
        const data = await this.loadData();
        const ix = await this.program.instruction.oracleSetConfigs({
            authority: params.authority,
            newSecpAuthority: null,
        }, {
            accounts: {
                oracle: this.pubkey,
                authority: params.authority,
            },
        });
        return ix;
    }
    async loadData() {
        return await this.program.account["oracleAccountData"].fetch(this.pubkey);
    }
    static async loadMany(program, keys) {
        const coder = new anchor_1.BorshAccountsCoder(program.idl);
        const accountType = "oracleAccountData";
        const oracleDatas = await anchor_1.utils.rpc
            .getMultipleAccounts(program.provider.connection, keys)
            .then((o) => o.map((x) => coder.decode(accountType, x.account.data)));
        return oracleDatas;
    }
    async verificationStatus() {
        const data = await this.loadData();
        const now = +new Date() / 1000;
        const status = data.enclave.verificationStatus;
        const expiration = data.enclave.validUntil;
        return [status === 4 && now < expiration, expiration.toNumber()];
    }
    async lutKey() {
        const payer = this.program.provider.wallet.payer;
        const data = await this.loadData();
        const lutSigner = (await web3_js_1.PublicKey.findProgramAddress([Buffer.from("LutSigner"), this.pubkey.toBuffer()], this.program.programId))[0];
        const [_, lutKey] = await web3_js_1.AddressLookupTableProgram.createLookupTable({
            authority: lutSigner,
            payer: payer.publicKey,
            recentSlot: data.lutSlot,
        });
        return lutKey;
    }
    lookupTableKey(data) {
        const lutSigner = web3_js_1.PublicKey.findProgramAddressSync([Buffer.from("LutSigner"), this.pubkey.toBuffer()], this.program.programId)[0];
        const [_, lutKey] = web3_js_1.AddressLookupTableProgram.createLookupTable({
            authority: lutSigner,
            payer: web3_js_1.PublicKey.default,
            recentSlot: data.lutSlot,
        });
        return lutKey;
    }
    async loadLookupTable() {
        const lutKey = await this.lutKey();
        const accnt = await this.program.provider.connection.getAddressLookupTable(lutKey);
        return accnt.value;
    }
}
exports.Oracle = Oracle;
//# sourceMappingURL=oracle.js.map