import type { FeedRequest } from "./../accounts/pullFeed.js";
import type * as anchor from "@coral-xyz/anchor";
import type { PublicKey } from "@solana/web3.js";
import { OracleJob } from "@switchboard-xyz/common";
export type FeedEvalResponse = {
    oracle_pubkey: string;
    queue_pubkey: string;
    oracle_signing_pubkey: string;
    feed_hash: string;
    recent_hash: string;
    failure_error: string;
    success_value: string;
    msg: string;
    signature: string;
    recovery_id: number;
    recent_successes_if_failed: Array<FeedEvalResponse>;
    timestamp?: number;
};
export type FeedEvalManyResponse = {
    feed_responses: FeedEvalResponse[];
    signature: string;
    recovery_id: number;
    errors: string[];
};
export type FetchSignaturesMultiResponse = {
    oracle_responses: FeedEvalManyResponse[];
    errors: string[];
};
export type RandomnessRevealResponse = {
    signature: string;
    recovery_id: number;
    value: Array<number>;
};
export type AttestEnclaveResponse = {
    guardian: string;
    signature: string;
    recovery_id: number;
};
export type PingResponse = {
    oracle_pubkey: string;
    oracle_authority: string;
    queue: string;
    rate_limit: number;
    version: string;
    mr_enclave: string;
    is_push_oracle: boolean;
    is_pull_oracle: boolean;
    is_gateway: boolean;
    is_guardian: boolean;
};
export type FetchQuoteResponse = {
    oracle_pubkey: string;
    queue: string;
    now: number;
    mr_enclave: string;
    ed25519_pubkey: string;
    secp256k1_pubkey: string;
    quote: string;
};
export interface BridgeEnclaveResponse {
    guardian: string;
    oracle: string;
    queue: string;
    mr_enclave: string;
    chain_hash: string;
    oracle_ed25519_enclave_signer: string;
    oracle_secp256k1_enclave_signer: string;
    msg: string;
    msg_prehash: string;
    signature: string;
    recovery_id: number;
}
export declare class Gateway {
    readonly program: anchor.Program;
    readonly gatewayUrl: string;
    readonly oracleKey?: anchor.web3.PublicKey | undefined;
    constructor(program: anchor.Program, gatewayUrl: string, oracleKey?: anchor.web3.PublicKey | undefined);
    fetchSignaturesFromEncoded(params: {
        recentHash?: string;
        encodedJobs: string[];
        numSignatures: number;
        maxVariance: number;
        minResponses: number;
        useTimestamp?: boolean;
    }): Promise<FeedEvalResponse[]>;
    ping(): Promise<PingResponse>;
    fetchAttestation(params: {
        timestamp: number;
        quote: string;
        oracle_pubkey: string;
        oracle_reward_wallet: string;
        oracle_ed25519_enclave_signer: string;
        oracle_secp256k1_enclave_signer: string;
        recentHash: string;
    }): Promise<AttestEnclaveResponse>;
    fetchQuote(params: {
        blockhash: string;
        get_for_oracle: boolean;
        get_for_guardian: boolean;
    }): Promise<FetchQuoteResponse[]>;
    fetchBridgingMessage(params: {
        chainHash: string;
        oraclePubkey: string;
        queuePubkey: string;
    }): Promise<BridgeEnclaveResponse>;
    fetchSignatures(params: {
        recentHash?: string;
        jobs: OracleJob[];
        numSignatures?: number;
        maxVariance?: number;
        minResponses?: number;
        useTimestamp?: boolean;
    }): Promise<FeedEvalResponse[]>;
    fetchSignaturesMulti(params: {
        recentHash?: string;
        feedConfigs: FeedRequest[];
        numSignatures?: number;
        useTimestamp?: boolean;
    }): Promise<FetchSignaturesMultiResponse>;
    fetchSignaturesFromEncodedMulti(params: {
        recentHash?: string;
        encodedConfigs: {
            encodedJobs: string[];
            maxVariance: number;
            minResponses: number;
        }[];
        numSignatures: number;
        useTimestamp?: boolean;
    }): Promise<FetchSignaturesMultiResponse>;
    fetchRandomnessReveal(params: {
        randomnessAccount: PublicKey;
        slothash: string;
        slot: number;
    } | {
        randomnessId: string;
        timestamp: number;
        minStalenessSeconds: number;
    }): Promise<RandomnessRevealResponse>;
    test(): Promise<boolean>;
    endpoint(): string;
    toString(): string;
    [Symbol.toPrimitive](hint: string): string | null;
}
//# sourceMappingURL=gateway.d.ts.map