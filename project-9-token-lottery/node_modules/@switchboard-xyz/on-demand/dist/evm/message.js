export function createUpsertHexString({ discriminator, feedId, queue, result, maxVariance, minResponses, blockNumber, r, s, v, timestamp, }) {
    const discriminatorHex = discriminator.toString(16).padStart(2, "0");
    const resultHex = BigInt(result).toString(16).padStart(32, "0");
    const maxVarianceHex = BigInt(maxVariance).toString(16).padStart(16, "0");
    const minResponsesHex = BigInt(minResponses).toString(16).padStart(8, "0");
    const blockNumberHex = BigInt(blockNumber).toString(16).padStart(16, "0");
    const vHex = v.toString(16).padStart(2, "0");
    const timestampHex = timestamp
        ? BigInt(timestamp).toString(16).padStart(16, "0")
        : "";
    return `0x${discriminatorHex}${feedId}${queue}${resultHex}${maxVarianceHex}${minResponsesHex}${blockNumberHex}${r}${s}${vHex}${timestampHex}`;
}
export function createUpdateHexString({ feedId, discriminator, result, blockNumber, r, s, v, timestamp, }) {
    const discriminatorHex = discriminator.toString(16).padStart(2, "0");
    const resultHex = BigInt(result).toString(16).padStart(32, "0");
    const blockNumberHex = BigInt(blockNumber).toString(16).padStart(16, "0");
    const vHex = v.toString(16).padStart(2, "0");
    const timestampHex = timestamp
        ? BigInt(timestamp).toString(16).padStart(16, "0")
        : "";
    return `0x${discriminatorHex}${feedId}${resultHex}${r}${s}${vHex}${blockNumberHex}${timestampHex}`;
}
export function createAttestationHexString({ discriminator, oracleId, queueId, ed25519Key, secp256k1Key, r, s, v, blockNumber, mrEnclave, }) {
    const discriminatorHex = discriminator.toString(16).padStart(2, "0");
    const blockNumberHex = BigInt(blockNumber).toString(16).padStart(16, "0");
    const vHex = v.toString(16).padStart(2, "0");
    return `0x${discriminatorHex}${oracleId}${queueId}${mrEnclave}${ed25519Key}${secp256k1Key}${blockNumberHex}${r}${s}${vHex}`;
}
export function createRandomnessRevealHexString({ randomnessId, result, r, s, v, }) {
    const discriminator = 4;
    const discriminatorHex = discriminator.toString(16).padStart(2, "0");
    return `0x${discriminatorHex}${randomnessId}${result}${r}${s}${v}`;
}
//# sourceMappingURL=message.js.map