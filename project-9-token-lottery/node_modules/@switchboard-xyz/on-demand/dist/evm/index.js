import { Queue } from "../accounts/index.js";
import { ON_DEMAND_DEVNET_GUARDIAN_QUEUE, ON_DEMAND_DEVNET_PID, ON_DEMAND_DEVNET_QUEUE, ON_DEMAND_MAINNET_GUARDIAN_QUEUE, ON_DEMAND_MAINNET_PID, ON_DEMAND_MAINNET_QUEUE, } from "../utils/index.js";
import { createAttestationHexString, createUpdateHexString, createUpsertHexString, } from "./message.js";
export * as message from "./message.js";
import * as anchor from "@coral-xyz/anchor";
import { Big, OracleJob } from "@switchboard-xyz/common";
import * as bs58 from "bs58";
export function createJob(params) {
    return OracleJob.fromObject(params);
}
export async function simulateFeed(params, queue) {
    const gateway = params.gateway ?? (await queue.fetchGateway());
    const [result] = await gateway.fetchSignatures({
        ...params,
        useTimestamp: true,
        recentHash: bs58.encode(Buffer.from(params.recentHash ?? "0".repeat(64), "hex")),
    });
    return {
        result: new Big(result.success_value).div(new Big(10).pow(18)).toNumber(),
        feedId: result.feed_hash,
        response: result,
    };
}
export async function getFeedUpdateData(params, queue) {
    return (await getFeedUpdateWithContext(params, queue)).map((r) => r.encoded);
}
export async function getFeedUpdateWithContext(params, queue) {
    const updates = [];
    const blockhash = params.recentHash ?? "0".repeat(64);
    if (params.jobs.length === 0) {
        return updates;
    }
    if (params.aggregatorId) {
        updates.push(...(await getUpdate({
            ...params,
            recentHash: blockhash,
        }, queue)));
    }
    else {
        updates.push(...(await getUpsert({
            ...params,
            recentHash: blockhash,
        }, queue)));
    }
    return updates;
}
export async function getUpsert(params, queue) {
    if (!params.recentHash) {
        params.recentHash = "0".repeat(64);
    }
    if (params.recentHash.startsWith("0x")) {
        params.recentHash = params.recentHash.slice(2);
    }
    const gateway = params.gateway ?? (await queue.fetchGateway());
    const results = await gateway.fetchSignatures({
        ...params,
        useTimestamp: true,
        recentHash: bs58.encode(Buffer.from(params.recentHash, "hex")),
    });
    const responses = [];
    for (const result of results) {
        const signatureBuffer = new Uint8Array(Buffer.from(result.signature, "base64"));
        const r = Buffer.from(signatureBuffer.slice(0, 32)).toString("hex");
        const s = Buffer.from(signatureBuffer.slice(32, 64)).toString("hex");
        const v = result.recovery_id;
        const hex = createUpsertHexString({
            discriminator: 0,
            feedId: result.feed_hash.toString(),
            queue: Buffer.from(queue.pubkey.toBytes()).toString("hex"),
            result: result.success_value.toString(),
            maxVariance: ((params.maxVariance ?? 1) * 1e9).toString(),
            minResponses: (params.minResponses ?? 1).toString(),
            blockNumber: params.blockNumber?.toString() ?? "0",
            timestamp: result.timestamp?.toString(),
            r,
            s,
            v,
        });
        const res = {
            feedId: result.feed_hash,
            result: new Big(result.success_value).div(new Big(10).pow(18)).toNumber(),
            encoded: hex,
            response: result,
        };
        responses.push(res);
    }
    return responses;
}
export async function getUpdate(params, queue) {
    if (!params.recentHash) {
        params.recentHash = "0".repeat(64);
    }
    if (params.recentHash.startsWith("0x")) {
        params.recentHash = params.recentHash.slice(2);
    }
    const gateway = params.gateway ?? (await queue.fetchGateway());
    const results = await gateway.fetchSignatures({
        ...params,
        useTimestamp: true,
        recentHash: bs58.encode(Buffer.from(params.recentHash, "hex")),
    });
    const response = [];
    for (const result of results) {
        const signatureBuffer = new Uint8Array(Buffer.from(result.signature, "base64"));
        const r = Buffer.from(signatureBuffer.slice(0, 32)).toString("hex");
        const s = Buffer.from(signatureBuffer.slice(32, 64)).toString("hex");
        const v = result.recovery_id;
        const updateString = createUpdateHexString({
            discriminator: 1,
            feedId: params.aggregatorId ?? result.feed_hash.toString(),
            result: result.success_value.toString(),
            blockNumber: params.blockNumber?.toString() ?? "0",
            timestamp: result.timestamp?.toString(),
            r,
            s,
            v,
        });
        const res = {
            feedId: result.feed_hash,
            result: new Big(result.success_value).div(new Big(10).pow(18)).toNumber(),
            encoded: updateString,
            response: result,
        };
        response.push(res);
    }
    return response;
}
export async function getAttestation(options) {
    const { guardianQueue, recentHash, queueId, oracleId, gateway, blockNumber } = options;
    const gatewayAccount = gateway ?? (await guardianQueue.fetchGateway());
    const chainHash = recentHash.startsWith("0x")
        ? recentHash.slice(2)
        : recentHash;
    const attestation = await gatewayAccount.fetchBridgingMessage({
        chainHash,
        queuePubkey: queueId,
        oraclePubkey: oracleId,
    });
    if (!options.recentHash) {
        options.recentHash = "0".repeat(64);
    }
    if (options.recentHash.startsWith("0x")) {
        options.recentHash = options.recentHash.slice(2);
    }
    const signatureBuffer = new Uint8Array(Buffer.from(attestation.signature, "base64"));
    const r = Buffer.from(signatureBuffer.slice(0, 32)).toString("hex");
    const s = Buffer.from(signatureBuffer.slice(32, 64)).toString("hex");
    const v = attestation.recovery_id;
    const hexString = createAttestationHexString({
        discriminator: 2,
        oracleId,
        queueId,
        ed25519Key: attestation.oracle_ed25519_enclave_signer,
        secp256k1Key: attestation.oracle_secp256k1_enclave_signer,
        r,
        s,
        v,
        mrEnclave: attestation.mr_enclave,
        blockNumber: blockNumber.toString(),
    });
    return {
        oracleId: attestation.oracle,
        queueId: attestation.queue,
        guardian: attestation.guardian,
        encoded: hexString,
        response: attestation,
    };
}
export async function getDefaultDevnetQueue(solanaRPCUrl = "https://api.devnet.solana.com") {
    return getQueue(solanaRPCUrl, ON_DEMAND_DEVNET_PID.toString(), ON_DEMAND_DEVNET_QUEUE.toString());
}
export async function getDefaultDevnetGuardianQueue(solanaRPCUrl = "https://api.devnet.solana.com") {
    return getQueue(solanaRPCUrl, ON_DEMAND_DEVNET_PID.toString(), ON_DEMAND_DEVNET_GUARDIAN_QUEUE.toString());
}
export async function getDefaultQueue(solanaRPCUrl = "https://api.mainnet-beta.solana.com") {
    return getQueue(solanaRPCUrl, ON_DEMAND_MAINNET_PID.toString(), ON_DEMAND_MAINNET_QUEUE.toString());
}
export async function getDefaultGuardianQueue(solanaRPCUrl = "https://api.mainnet-beta.solana.com") {
    return getQueue(solanaRPCUrl, ON_DEMAND_MAINNET_PID.toString(), ON_DEMAND_MAINNET_GUARDIAN_QUEUE.toString());
}
export async function getQueue(solanaRPCUrl, switchboardProgramId, queueAddress) {
    const { PublicKey, Keypair, Connection } = anchor.web3;
    const wallet = new anchor.Wallet(new Keypair());
    const connection = new Connection(solanaRPCUrl, "confirmed");
    const PID = new PublicKey(switchboardProgramId);
    const queue = new PublicKey(queueAddress);
    const provider = new anchor.AnchorProvider(connection, wallet, {});
    const idl = (await anchor.Program.fetchIdl(PID, provider));
    const program = new anchor.Program(idl, provider);
    const queueAccount = new Queue(program, queue);
    return queueAccount;
}
export async function fetchResult({ feedId, chainId, crossbarUrl, minResponses, maxVariance, numSignatures, syncOracles, syncGuardians, }) {
    if (!crossbarUrl) {
        crossbarUrl = "https://crossbar.switchboard.xyz";
    }
    return {
        feedId,
        ...(await fetchUpdateData(crossbarUrl, chainId.toString(), feedId, minResponses, maxVariance, numSignatures, syncOracles, syncGuardians)),
    };
}
export async function fetchResults({ feedIds, chainId, crossbarUrl, minResponses, maxVariance, numSignatures, syncOracles, syncGuardians, }) {
    if (!crossbarUrl) {
        crossbarUrl = "https://crossbar.switchboard.xyz";
    }
    const responses = await Promise.all(feedIds.map((feedId) => {
        return fetchUpdateData(crossbarUrl, chainId.toString(), feedId, minResponses, maxVariance, numSignatures, syncOracles, syncGuardians);
    }));
    return responses.map((response, index) => {
        return {
            feedId: feedIds[index],
            ...response,
        };
    });
}
export async function fetchRandomness({ chainId, crossbarUrl, randomnessId, timestamp, minStalenessSeconds, }) {
    if (!crossbarUrl) {
        crossbarUrl = "https://crossbar.switchboard.xyz";
    }
    return fetchRandomnessData(crossbarUrl, chainId.toString(), randomnessId, timestamp, minStalenessSeconds);
}
async function fetchUpdateData(crossbarUrl, chainId, feedId, minResponses = 1, maxVariance = 1e9, numSignatures = 1, syncOracles = true, syncGuardians = true, gateway) {
    const cleanedCrossbarUrl = crossbarUrl.endsWith("/")
        ? crossbarUrl.slice(0, -1)
        : crossbarUrl;
    const url = new URL(`${cleanedCrossbarUrl}/updates/evm/${chainId}/${feedId}`);
    if (minResponses !== undefined) {
        url.searchParams.append("minResponses", minResponses.toString());
    }
    if (maxVariance !== undefined) {
        url.searchParams.append("maxVariance", maxVariance.toString());
    }
    if (numSignatures !== undefined) {
        url.searchParams.append("numSignatures", numSignatures.toString());
    }
    if (syncOracles !== undefined) {
        url.searchParams.append("syncOracles", syncOracles.toString());
    }
    if (syncGuardians !== undefined) {
        url.searchParams.append("syncGuardians", syncGuardians.toString());
    }
    if (gateway !== undefined) {
        url.searchParams.append("gateway", gateway);
    }
    try {
        const response = await fetch(url.toString(), {
            method: "GET",
        });
        if (!response.ok) {
            throw new Error(`Error fetching data: ${response.statusText}`);
        }
        const data = await response.json();
        return data;
    }
    catch (error) {
        console.error("Error fetching feed data:", error);
        throw error;
    }
}
async function fetchRandomnessData(crossbarUrl, chainId, randomnessId, timestamp, minStalenessSeconds) {
    const cleanedCrossbarUrl = crossbarUrl.endsWith("/")
        ? crossbarUrl.slice(0, -1)
        : crossbarUrl;
    const url = new URL(`${cleanedCrossbarUrl}/randomness/evm/${chainId}/${randomnessId}`);
    if (timestamp !== undefined) {
        url.searchParams.append("timestamp", timestamp.toString());
    }
    if (minStalenessSeconds !== undefined) {
        url.searchParams.append("minStalenessSeconds", minStalenessSeconds.toString());
    }
    try {
        const response = await fetch(url.toString(), {
            method: "GET",
        });
        if (!response.ok) {
            throw new Error(`Error fetching data: ${response.statusText}`);
        }
        const data = await response.json();
        return data;
    }
    catch (error) {
        console.error("Error fetching randomness data:", error);
        throw error;
    }
}
//# sourceMappingURL=index.js.map